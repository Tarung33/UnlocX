{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add auth token to every request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Auth endpoints\nexport const registerUser = userData => api.post('/auth/register', userData);\nexport const loginUser = userData => api.post('/auth/login', userData);\nexport const getCurrentUser = () => api.get('/auth/me');\nexport const getUserStats = () => api.get('/users/stats');\n\n// Platform endpoints\nexport const getPlatforms = () => api.get('/platforms');\nexport const getPlatform = id => api.get(`/platforms/${id}`);\nexport const connectPlatform = id => api.post(`/platforms/${id}/connect`);\nexport const disconnectPlatform = id => api.delete(`/platforms/${id}/connect`);\n\n// Goal endpoints\nexport const getGoals = params => api.get('/goals', {\n  params\n});\nexport const getGoal = id => api.get(`/goals/${id}`);\nexport const createGoal = goalData => api.post('/goals', goalData);\nexport const updateGoalProgress = (id, progressData) => api.put(`/goals/${id}/progress`, progressData);\nexport const deleteGoal = id => api.delete(`/goals/${id}`);\n\n// Reward endpoints\nexport const getRewards = () => api.get('/rewards');\nexport const getReward = id => api.get(`/rewards/${id}`);\nexport const claimReward = id => api.post(`/rewards/${id}/claim`);\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","registerUser","userData","post","loginUser","getCurrentUser","get","getUserStats","getPlatforms","getPlatform","id","connectPlatform","disconnectPlatform","delete","getGoals","params","getGoal","createGoal","goalData","updateGoalProgress","progressData","put","deleteGoal","getRewards","getReward","claimReward"],"sources":["C:/Users/DELL/Desktop/unlocx/UnlocX/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to add auth token to every request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth endpoints\r\nexport const registerUser = (userData) => api.post('/auth/register', userData);\r\nexport const loginUser = (userData) => api.post('/auth/login', userData);\r\nexport const getCurrentUser = () => api.get('/auth/me');\r\nexport const getUserStats = () => api.get('/users/stats');\r\n\r\n// Platform endpoints\r\nexport const getPlatforms = () => api.get('/platforms');\r\nexport const getPlatform = (id) => api.get(`/platforms/${id}`);\r\nexport const connectPlatform = (id) => api.post(`/platforms/${id}/connect`);\r\nexport const disconnectPlatform = (id) => api.delete(`/platforms/${id}/connect`);\r\n\r\n// Goal endpoints\r\nexport const getGoals = (params) => api.get('/goals', { params });\r\nexport const getGoal = (id) => api.get(`/goals/${id}`);\r\nexport const createGoal = (goalData) => api.post('/goals', goalData);\r\nexport const updateGoalProgress = (id, progressData) => api.put(`/goals/${id}/progress`, progressData);\r\nexport const deleteGoal = (id) => api.delete(`/goals/${id}`);\r\n\r\n// Reward endpoints\r\nexport const getRewards = () => api.get('/rewards');\r\nexport const getReward = (id) => api.get(`/rewards/${id}`);\r\nexport const claimReward = (id) => api.post(`/rewards/${id}/claim`);\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAIC,QAAQ,IAAKf,GAAG,CAACgB,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;AAC9E,OAAO,MAAME,SAAS,GAAIF,QAAQ,IAAKf,GAAG,CAACgB,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;AACxE,OAAO,MAAMG,cAAc,GAAGA,CAAA,KAAMlB,GAAG,CAACmB,GAAG,CAAC,UAAU,CAAC;AACvD,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAMpB,GAAG,CAACmB,GAAG,CAAC,cAAc,CAAC;;AAEzD;AACA,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAMrB,GAAG,CAACmB,GAAG,CAAC,YAAY,CAAC;AACvD,OAAO,MAAMG,WAAW,GAAIC,EAAE,IAAKvB,GAAG,CAACmB,GAAG,CAAC,cAAcI,EAAE,EAAE,CAAC;AAC9D,OAAO,MAAMC,eAAe,GAAID,EAAE,IAAKvB,GAAG,CAACgB,IAAI,CAAC,cAAcO,EAAE,UAAU,CAAC;AAC3E,OAAO,MAAME,kBAAkB,GAAIF,EAAE,IAAKvB,GAAG,CAAC0B,MAAM,CAAC,cAAcH,EAAE,UAAU,CAAC;;AAEhF;AACA,OAAO,MAAMI,QAAQ,GAAIC,MAAM,IAAK5B,GAAG,CAACmB,GAAG,CAAC,QAAQ,EAAE;EAAES;AAAO,CAAC,CAAC;AACjE,OAAO,MAAMC,OAAO,GAAIN,EAAE,IAAKvB,GAAG,CAACmB,GAAG,CAAC,UAAUI,EAAE,EAAE,CAAC;AACtD,OAAO,MAAMO,UAAU,GAAIC,QAAQ,IAAK/B,GAAG,CAACgB,IAAI,CAAC,QAAQ,EAAEe,QAAQ,CAAC;AACpE,OAAO,MAAMC,kBAAkB,GAAGA,CAACT,EAAE,EAAEU,YAAY,KAAKjC,GAAG,CAACkC,GAAG,CAAC,UAAUX,EAAE,WAAW,EAAEU,YAAY,CAAC;AACtG,OAAO,MAAME,UAAU,GAAIZ,EAAE,IAAKvB,GAAG,CAAC0B,MAAM,CAAC,UAAUH,EAAE,EAAE,CAAC;;AAE5D;AACA,OAAO,MAAMa,UAAU,GAAGA,CAAA,KAAMpC,GAAG,CAACmB,GAAG,CAAC,UAAU,CAAC;AACnD,OAAO,MAAMkB,SAAS,GAAId,EAAE,IAAKvB,GAAG,CAACmB,GAAG,CAAC,YAAYI,EAAE,EAAE,CAAC;AAC1D,OAAO,MAAMe,WAAW,GAAIf,EAAE,IAAKvB,GAAG,CAACgB,IAAI,CAAC,YAAYO,EAAE,QAAQ,CAAC;AAEnE,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}